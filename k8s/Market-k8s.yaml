# all-in-one.yaml
---
apiVersion: v1
kind: Namespace
metadata:
  name: marketplace
  labels:
    istio-injection: enabled
---
# Gateway Configuration
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: marketplace-gateway
  namespace: marketplace
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - "*"
---
# VirtualService for API Gateway
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: api-gateway-virtualservice
  namespace: marketplace
spec:
  hosts:
    - "*"
  gateways:
    - marketplace-gateway
  http:
    - match:
        - uri:
            prefix: "/swagger"
      route:
        - destination:
            host: api-gateway-svc.marketplace.svc.cluster.local
            port:
              number: 3000
    - match:
        - uri:
            prefix: "/api" 
      route:
        - destination:
            host: api-gateway-svc.marketplace.svc.cluster.local
            port:
              number: 3000
---
# Auth Service Retry Timeout Configuration
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: auth-service-vs
  namespace: marketplace
spec:
  hosts:
    - auth-service-svc.marketplace.svc.cluster.local
  http:
    - route:
        - destination:
            host: auth-service-svc.marketplace.svc.cluster.local
            port:
              number: 8000
      timeout: 10s
      retries:
        attempts: 2
        perTryTimeout: 10s
        retryOn: "connect-failure,refused-stream"
---
# Enable mtls
apiVersion: security.istio.io/v1
kind: PeerAuthentication
metadata:
  name: default
  namespace: marketplace
spec:
  mtls:
    mode: STRICT
---
apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: marketplace-mtls
  namespace: marketplace
spec:
  host: "*.marketplace.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL
    connectionPool:
      tcp:
        maxConnections: 100
      http:
        http1MaxPendingRequests: 10
        maxRequestsPerConnection: 10
        maxRetries: 3
    outlierDetection:
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 30s
      maxEjectionPercent: 50
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: internal-services-only
  namespace: marketplace
spec:
  selector:
    matchLabels:
      app: api-gateway
  action: ALLOW
  rules:
    - from:
        - source:
            namespaces: ["marketplace"]
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: api-gateway-access
  namespace: marketplace
spec:
  selector:
    matchLabels:
      app: api-gateway
  action: ALLOW
  rules:
    - {}
---
# Volumes
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongo-pvc
  namespace: marketplace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: marketplace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: es-pvc
  namespace: marketplace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper-svc
  namespace: marketplace
spec:
  selector:
    app: zookeeper
  ports:
    - protocol: TCP
      port: 2181
      targetPort: 2181
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-svc
  namespace: marketplace
spec:
  selector:
    app: kafka
  ports:
    - name: client
      port: 9092
      targetPort: 9092
    - name: host
      port: 29092
      targetPort: 29092
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-svc
  namespace: marketplace
spec:
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017
---
apiVersion: v1
kind: Service
metadata:
  name: redis-svc
  namespace: marketplace
spec:
  selector:
    app: redis
  ports:
    - port: 6379
      targetPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch-svc
  namespace: marketplace
spec:
  selector:
    app: elasticsearch
  ports:
    - port: 9200
      targetPort: 9200
---
apiVersion: v1
kind: Service
metadata:
  name: product-service-svc
  namespace: marketplace
spec:
  type: NodePort
  selector:
    app: product-service
  ports:
    - port: 8002
      targetPort: 8002
      nodePort: 30002
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: order-service-svc
#   namespace: marketplace
# spec:
#   type: NodePort
#   selector:
#     app: order-service
#   ports:
#     - port: 8003
#       targetPort: 8003
#       nodePort: 30003
---
apiVersion: v1
kind: Service
metadata:
  name: auth-service-svc
  namespace: marketplace
spec:
  type: NodePort
  selector:
    app: auth-service
  ports:
    - port: 8000
      targetPort: 8000
      nodePort: 30000
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-svc
  namespace: marketplace
spec:
  type: NodePort
  selector:
    app: api-gateway
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30004
---
apiVersion: v1
kind: Service
metadata:
  name: search-service-svc
  namespace: marketplace
spec:
  type: NodePort
  selector:
    app: search-service
  ports:
    - port: 8004
      targetPort: 8004
      nodePort: 30005
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: zookeeper
  namespace: marketplace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: zookeeper
  template:
    metadata:
      labels:
        app: zookeeper
    spec:
      containers:
        - name: zookeeper
          image: confluentinc/cp-zookeeper:7.6.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 2181
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: marketplace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      containers:
        - name: kafka
          image: confluentinc/cp-kafka:7.6.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9092
            - containerPort: 29092
          env:
            - name: KAFKA_BROKER_ID
              value: "1"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper-svc.marketplace.svc.cluster.local:2181"
            - name: KAFKA_LISTENERS
              value: "PLAINTEXT://0.0.0.0:9092"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://kafka-svc.marketplace.svc.cluster.local:9092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "PLAINTEXT:PLAINTEXT"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "PLAINTEXT"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "true"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: marketplace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:6.0
          ports:
            - containerPort: 27017
          volumeMounts:
            - name: mongo-storage
              mountPath: /data/db
      volumes:
        - name: mongo-storage
          persistentVolumeClaim:
            claimName: mongo-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: marketplace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
        - name: redis
          image: redis:7
          ports:
            - containerPort: 6379
          volumeMounts:
            - name: redis-storage
              mountPath: /data
      volumes:
        - name: redis-storage
          persistentVolumeClaim:
            claimName: redis-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: marketplace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.12.2
          ports:
            - containerPort: 9200
          env:
            - name: discovery.type
              value: single-node
            - name: xpack.security.enabled
              value: "false"
          volumeMounts:
            - name: es-storage
              mountPath: /usr/share/elasticsearch/data
      volumes:
        - name: es-storage
          persistentVolumeClaim:
            claimName: es-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service
  namespace: marketplace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
    spec:
      containers:
        - name: product-service
          image: product-service:dev 
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 8002 }]
          env:
            - name: ASPNETCORE_URLS
              value: "http://+:8002"
            - name: ConnectionStrings__Mongo
              value: "mongodb://mongodb-svc.marketplace.svc.cluster.local:27017/MarketPlaceDB"
            - name: Kafka__BootstrapServers
              value: "kafka-svc.marketplace.svc.cluster.local:9092"
            - name: Redis__Connection
              value: "redis-svc.marketplace.svc.cluster.local:6379"
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: order-service
#   namespace: marketplace
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: order-service
#   template:
#     metadata:
#       labels:
#         app: order-service
#     spec:
#       containers:
#         - name: order-service
#           image: order-service:dev 
#           imagePullPolicy: IfNotPresent
#           ports: [{ containerPort: 8003 }]
#           env:
#             - name: ASPNETCORE_URLS
#               value: "http://+:8003"
#             - name: ConnectionStrings__Mongo
#               value: "mongodb://mongodb-svc.marketplace.svc.cluster.local:27017/MarketPlaceDB"
#             - name: Kafka__BootstrapServers
#               value: "kafka-svc.marketplace.svc.cluster.local:9092"
#             - name: Redis__Connection
#               value: "redis-svc:6379"
#             - name: ProductApiUrl
#               value: "http://product-service-svc.marketplace.svc.cluster.local:8002"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-service
  namespace: marketplace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth-service
  template:
    metadata:
      labels:
        app: auth-service
    spec:
      containers:
        - name: auth-service
          image: auth-service:dev 
          imagePullPolicy: Never
          ports: [{ containerPort: 8000 }]
          env:
            - name: ASPNETCORE_URLS
              value: "http://+:8000"
            - name: Kafka__BootstrapServers
              value: "kafka-svc:9092"
            - name: ConnectionStrings__Mongo
              value: "mongodb://mongodb-svc.marketplace.svc.cluster.local:27017/MarketPlaceDB"
            - name: Elastic__Uri
              value: "http://elasticsearch-svc:9200"
          readinessProbe: null
          livenessProbe: null
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: marketplace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
        - name: api-gateway
          image: api-gateway:dev  # 👈
          imagePullPolicy: Never
          ports:
            - containerPort: 3000
          env:
            - name: ASPNETCORE_URLS
              value: "http://+:3000"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: search-service
  namespace: marketplace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: search-service
  template:
    metadata:
      labels:
        app: search-service
    spec:
      containers:
        - name: search-service
          image: search-service:dev  # 👈
          imagePullPolicy: IfNotPresent
          ports: [{ containerPort: 8004 }]
          env:
            - name: ASPNETCORE_URLS
              value: "http://+:8004"
            - name: Kafka__BootstrapServers
              value: "kafka-svc.marketplace.svc.cluster.local:9092"
            - name: Elastic__Uri
              value: "http://elasticsearch-svc.marketplace.svc.cluster.local:9200"
            - name: ConnectionStrings__Redis
              value: "redis-svc.marketplace.svc.cluster.local:6379"